version: "3.9"

services:
  # -------------------- Django API (Gunicorn) --------------------
  web:
    build: .
    command: ["gunicorn", "--bind", "0.0.0.0:8000", "backend.wsgi:application"]
    volumes:
      - .:/app
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    env_file:
      - .env
    networks:
      - backend-network

  # -------------------- Daphne for WebSockets --------------------
  daphne:
    build: .
    command: ["daphne", "-b", "0.0.0.0", "-p", "8001", "backend.asgi:application"]
    volumes:
      - .:/app
    ports:
      - "8001:8001"
    depends_on:
      - db
      - redis
    env_file:
      - .env
    networks:
      - backend-network

  # -------------------- Postgres DB --------------------
  db:
    image: postgres:15
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - backend-network

  # -------------------- Redis --------------------
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - backend-network

  # -------------------- Celery Worker --------------------
  celery-worker:
    build: .
    command: ["celery", "-A", "backend", "worker", "--loglevel=info"]
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    env_file:
      - .env
    networks:
      - backend-network

  # -------------------- Celery Beat --------------------
  celery-beat:
    build: .
    command: ["celery", "-A", "backend", "beat", "--loglevel=info"]
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    env_file:
      - .env
    networks:
      - backend-network

# -------------------- Volumes --------------------
volumes:
  db_data:
  media_volume:

# -------------------- Network --------------------
networks:
  backend-network:
    driver: bridge
